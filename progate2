・真偽値

boolean型
true・・・真
false・・・偽

・比較演算子

x == y
xとyが等しい時true
xとyが等しくない時false

x != y
xとyが等しくない時true
xとyが等しい時false
→ ==の逆になる

class main {
  public static void main(String[] args) {
    System.out.println(12 / 4 == 3);
    → true
    
    System.out.println(12 / 4 != 3);
    → false
    
    boolean bool = 3 * 9 == 27;
    System.out.println(book);
    → true
  }
}

・大小比較

x < y
yの方が大きい時true
x <= y
yの方が大きい時又は等しい時true

x > y
yの方が小さい時true
x >= y
yの方が小さい時又は等しい時true

・論理演算子

class main {
  public static void main(String[] args) {
    //「8 < 5」かつ「3 >= 2」の結果
    System.out.println(8 < 5 && 3 >= 2);
    → false
    
    //「8 < 5」または「3 >= 2」の結果
    System.out.println(8 < 5 || 3 >= 2);
    → true
    
    //「8 < 5」でない、の結果
    System.out.println( !(8 < 5) );
    → true
 }
}

・条件分岐1(if, else, else if)

class main {
  public static void main(String[] args) {
    if(true) {
      System.out.println("条件式がtrueのため、出力されます");
      → 条件式がtrueのため、出力されます
    }
    if(false) {
      System.out.println("条件式がfalseのため、出力されません");
      → （条件がfalseのため何も出力されない）    
    }
    
    int x = 5
    if(x > 2) {
      System.out.println("xは2より大きい");
      → xは2より大きい   
    }
    
    if(x > 8) {
      System.out.println("xは8より大きい");
      → （条件がfalseのため何も出力されない）  
    }
    
    int number = 12
    if(number < 10) {
      System.out.println("10より小さい");
    } else {
        System.out.println("10以上")
      }
    →  10以上
    
    int number = 12
    if(number < 10) {
      System.out.println("10より小さい");
    } else if(number < 20) {
      System.out.println("10以上、20より小さい");
    } else {
      System.out.println("10以上")
    }
    →  10以上、20より小さい
 }
}

・条件分岐2(switch)
〜breakの役割〜
　switch文を修了する命令。
　breakがないと合致したcaseの処理を行った後、その次のcaseの処理も実行してしまう。
　
class main {
  public static void main(String[] args) {
    int number = 12;
    
    //numberを3で割ったあまりの条件分岐
    switch(number % 3){
      case 0 :
        System.out.println("3で割り切れます");
        break;
      case 1 :
        System.out.println("3で割ると1余ります");
        break;
      case 2 :
        System.out.println("3で割ると2余ります");
        break;
      default :
        System.out.println("どれも当てはまりません");
        break;
    }
    → 3で割り切れます
  }
}

・繰り返し処理(while)

class main {
  public static void main(String[] args) {
    int number = 1;
    
    while(number <= 10) {
      System.out.println(number);
      number ++;
    }
    → 1~10が順番に出力される（numberが10を超えたタイミングでfalseとなり修了する）
  }
}

・繰り返し処理(for)

class main {
  public static void main(String[] args) {
    
    for(number = 1; number <= 10; number ++;) {
      System.out.println(number);
      number ++;
    }
    → 1~10が順番に出力される（numberが10を超えたタイミングでfalseとなり修了する）
  }
}

・繰り返し処理を終了させる方法

 ~break~
 
 class main {
  public static void main(String[] args) {
    int number = 1;
    
    while(number < 10) {
      if(number % 5 == 0){
        break;
      }
      System.out.println(number);
      number ++;
    }
    → 1~4までが順番に出力される（numberが５の倍数になった時、繰り返し処理が終了される。）
  }
}

 ~continue~
 
 class main {
  public static void main(String[] args) {
    
    for(number = 1; number < 10; number ++;) {
      if(number % 3 == 0){
        continue;
      }
      System.out.println(number);
      number ++;
    }
    → 1,2,4,5,8が出力される（numberが3の倍数の時、処理がスキップされる）
  }
}

・配列
class main {
  public static void main {
  
    String [] names = ("にんじゃわんこ", "ひつじ仙人", "ベイビーわんこ");
    System.out.println(0);
    → にんじゃわんこ
    
    //要素の上書き
    names[0] = わんこ
    System.out.println(0);
    → わんこ
    
    //for文を用いて全ての要素を出力
    for(int i =0; names.length; i++;)
    System.out.println("私の名前は" + names[i] +"です");
    →私の名前はにんじゃわんこです
     私の名前はひつじ仙人です
     私の名前はベイビーわんこです
     
    //よりシンプルな記述方法(拡張for文)
    for(String name: names){
      System.out.println("私の名前は" + name + "です");
      → 私の名前はにんじゃわんこです
     私の名前はひつじ仙人です
     私の名前はベイビーわんこです
     
    }
  }
}